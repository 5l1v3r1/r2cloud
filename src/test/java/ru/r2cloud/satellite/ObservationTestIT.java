package ru.r2cloud.satellite;

import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.contains;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.File;
import java.util.Date;
import java.util.UUID;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import ru.r2cloud.TestConfiguration;
import ru.r2cloud.model.SatPass;
import ru.r2cloud.model.Satellite;
import ru.r2cloud.util.ProcessFactory;
import uk.me.g4dpz.satellite.SatPos;

public class ObservationTestIT {

	@Rule
	public TemporaryFolder tempFolder = new TemporaryFolder();

	private TestConfiguration config;
	private Satellite satellite;
	private ProcessFactory factory;

	@Test
	public void testSuccess() throws Exception {
		String rtlfm = UUID.randomUUID().toString();
		config.setProperty("satellites.sox.path", "sox");
		config.setProperty("satellites.rtlsdr.path", rtlfm);
		config.setProperty("satellites.wxtoimg.path", "wxtoimg");

		when(factory.create(contains("sox"), any(), anyBoolean())).thenCallRealMethod();
		when(factory.create(contains("wxtoimg"), any(), anyBoolean())).thenCallRealMethod();
		when(factory.create(contains(rtlfm), any(), anyBoolean())).thenReturn(new ProcessWrapperMock(new AutoGeneratedBytes(), null));

		SatPass nextPass = create(new Date(), new Date());
		Observation o = new Observation(config, satellite, nextPass, factory);
		o.start();
		o.stop();

		File a = new File(tempFolder.getRoot(), satellite.getId() + File.separator + "data" + File.separator + nextPass.getStart().getTime().getTime() + File.separator + "a.jpg");
		File b = new File(tempFolder.getRoot(), satellite.getId() + File.separator + "data" + File.separator + nextPass.getStart().getTime().getTime() + File.separator + "b.jpg");

		assertTrue(a.exists());
		assertTrue(a.length() > 0);
		assertTrue(b.exists());
		assertTrue(b.length() > 0);

	}

	@Before
	public void start() throws Exception {
		config = new TestConfiguration(tempFolder);
		config.setProperty("satellites.enabled", true);
		config.setProperty("satellites.basepath.location", tempFolder.getRoot().getAbsolutePath());
		config.update();

		satellite = new Satellite();
		satellite.setId(UUID.randomUUID().toString());
		satellite.setFrequency(10);
		satellite.setName(UUID.randomUUID().toString());

		factory = mock(ProcessFactory.class);
	}

	private static SatPass create(Date start, Date end) {
		SatPos startPos = new SatPos();
		startPos.setTime(start);
		SatPos endPos = new SatPos();
		endPos.setTime(end);
		SatPass result = new SatPass();
		result.setStart(startPos);
		result.setEnd(endPos);
		return result;
	}

}
